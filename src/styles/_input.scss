
fieldset {
  border: 0;
  margin: 0;
  padding: 0;
  position: relative;

  legend {
    position: absolute;
    top: 0;
    left: 1.5em;
    background: var(--input-bg);
    border: 0;
    border-radius: var(--input-border-radius);
    padding: 5px;
    height: 22px;
    margin-top: -14px;
    text-transform: uppercase;
    font-size: 12px;
    color: var(--help-color);
    font-weight: bold;
    letter-spacing: .060em;
  }
}

.input {
  margin: 0 1em 1em 0;
  display: block;
  position: relative;

  * {
    font-family: sans-serif;
    font-size: 16px;
    line-height: 1;
    font-weight: bold;
    letter-spacing: var(--letter-spacing);
  }

  & .help {
    @extend .help;
    font-weight: normal;
    margin: .25em 0 0 0;
    padding: 0;
  }

  label:not(.sr-only) {
    color: #444;
    line-height: 22px;
    letter-spacing: 0;
    font-weight: bold;
    display: block;
    padding: 0;
    margin: 0 0 .5em 0;
  }

  &.-label-s label {
    text-transform: uppercase;
    font-size: 12px;
    color: #444;
    font-weight: bold;
    letter-spacing: .060em;
  }

  .-inline &.-offset-label label {
    text-indent: -9999px;
    overflow: hidden;
  }

  button.-active,
  input[type='text'].-active {
    background: var(--active-bg);
    border: solid 1px var(--active-bg);
    color: var(--active-color);
  }

  button {
    border: var(--input-border);
    border-radius: var(--input-border-radius);
    background: var(--button-bg);
    color: var(--button-color);
    padding: .5em 1em;
    cursor: pointer;
    height: 40px;
    transition: all $ts $te;

    &[disabled] {
      cursor: not-allowed;
    }

    &:hover:not(.-active) {
      background: var(--active-hover); // darken($button-bg, 15%);
      border-color: var(--active-bg);
    }
  }

  input[type='text'],
  input[type='email'],
  input[type='tel'],
  textarea,
  select {
    border: var(--input-border);
    border-radius: var(--input-border-radius);
    background-color: var(--input-bg);
    color: #444;
    padding: 0 10px;
    height: 40px;
    transition: all $ts $te;

    &:focus,
    &:hover {
      outline: none;
      border-color: darken($input-border-color, 25%);
    }

    &::placeholder {
      color: #999;
    }
  }

  select {
    -webkit-appearance: none;
    -moz-appearance: none;
    background-image: url("data:image/svg+xml;utf8,<svg fill='black' height='24' width='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'><path d='M7 10l5 5 5-5z'/><path d='M0 0h24v24H0z' fill='none'/></svg>");
    background-repeat: no-repeat;
    background-position-x: 100%;
    background-position-y: 7px;
    padding-right: 24px;
    font-weight: normal;

    option {
      font-weight: normal;
      color: var(--help-color);
    }
  }

  textarea {
    min-height: 80px;
    width: 99.5%;
    padding: 10px;
    line-height: 1.5;
  }

  &.-checkbox,
  &.-radio {
    label {
      display: block;
      position: relative;
      margin: 0;
      padding: 0 0 0 35px;
      cursor: pointer;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;

      // Hide the browser's default checkbox.
      input {
        position: absolute;
        opacity: 0;
        cursor: pointer;
        height: 0;
        width: 0;
      }

      // Create a custom checkbox.
      span {
        display: block;
        position: absolute;
        top: 0;
        left: 0;
        height: var(--input-checkbox-size);
        width: var(--input-checkbox-size);
        background-color: var(--input-bg);
        border: solid 1px darken($input-border-color, 8%);
        transition: background-color $ts $te, border $ts $te;

        // Create the checkmark/indicator (hidden when not checked).
        &::after {
          display: none;
          content: '\2713';
          position: absolute;
          top: 0;
          left: 1px;
          font-size: 22px;
          line-height: 1;
          color: var(--input-bg);
          transition: display $ts $te;
        }
      }

      // On hover, set background.
      &:hover input ~ span {
        background-color: var(--active-hover);
        border-color: var(--active-bg);
      }
      // On checked, set background.
      input:checked ~ span {
        background-color: var(--active-bg);
        border-color: var(--active-bg);
      }
      // On checked, show checkmark.
      input:checked ~ span::after {
        display: block;
      }
    }
  }

  &.-radio label {
    $radio-size: calc(var(--input-checkbox-size) - 5px);

    span {
      top: 0;
      left: 0;
      height: var(--input-checkbox-size);
      width: var(--input-checkbox-size);
      border-radius: 50%;

      &::after {
        content: '';
        top: 3px;
        left: 3px;
        border: 0;
        width: 14px;
        height: 14px;
        border-radius: 50%;
        background: var(--active-bg);
      }
    }

    // On checked, set background.
    input:checked ~ span {
      background-color: var(--input-bg);
      border: solid 1px var(--active-bg);
    }
    // On checked, show checkmark.
    input:checked ~ span::after {
      display: block;
    }
  }


  &.-custom-level {
    display: flex;
    align-items: center;
    padding-left: 0;
    margin-left: -.5em;

    &::before {
      content: '\0024';
      display: block;
      padding: 0 5px 0 0;
      font-weight: bold;
    }

    input[type='text'] {
      width: 120px;

      &::placeholder {
        color: var(--button-color);
      }

      &.-active::placeholder {
        color: var(--active-color);
      }
    }
  }

  .react-datepicker-popper .react-datepicker__triangle {
    display: none;
  }

}
